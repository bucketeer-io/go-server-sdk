// Code generated by MockGen. DO NOT EDIT.
// Source: features.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	feature "github.com/bucketeer-io/bucketeer/proto/feature"
	gomock "github.com/golang/mock/gomock"
)

// MockFeaturesCache is a mock of FeaturesCache interface.
type MockFeaturesCache struct {
	ctrl     *gomock.Controller
	recorder *MockFeaturesCacheMockRecorder
}

// MockFeaturesCacheMockRecorder is the mock recorder for MockFeaturesCache.
type MockFeaturesCacheMockRecorder struct {
	mock *MockFeaturesCache
}

// NewMockFeaturesCache creates a new mock instance.
func NewMockFeaturesCache(ctrl *gomock.Controller) *MockFeaturesCache {
	mock := &MockFeaturesCache{ctrl: ctrl}
	mock.recorder = &MockFeaturesCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeaturesCache) EXPECT() *MockFeaturesCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockFeaturesCache) Get(tag string) (*feature.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tag)
	ret0, _ := ret[0].(*feature.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFeaturesCacheMockRecorder) Get(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFeaturesCache)(nil).Get), tag)
}

// Put mocks base method.
func (m *MockFeaturesCache) Put(tag string, features *feature.Features) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", tag, features)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockFeaturesCacheMockRecorder) Put(tag, features interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockFeaturesCache)(nil).Put), tag, features)
}
