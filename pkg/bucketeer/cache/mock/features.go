// Code generated by MockGen. DO NOT EDIT.
// Source: features.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	feature "github.com/bucketeer-io/bucketeer/proto/feature"
	gomock "go.uber.org/mock/gomock"
)

// MockFeaturesCache is a mock of FeaturesCache interface.
type MockFeaturesCache struct {
	ctrl     *gomock.Controller
	recorder *MockFeaturesCacheMockRecorder
}

// MockFeaturesCacheMockRecorder is the mock recorder for MockFeaturesCache.
type MockFeaturesCacheMockRecorder struct {
	mock *MockFeaturesCache
}

// NewMockFeaturesCache creates a new mock instance.
func NewMockFeaturesCache(ctrl *gomock.Controller) *MockFeaturesCache {
	mock := &MockFeaturesCache{ctrl: ctrl}
	mock.recorder = &MockFeaturesCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeaturesCache) EXPECT() *MockFeaturesCacheMockRecorder {
	return m.recorder
}

// GetFeatureFlag mocks base method.
func (m *MockFeaturesCache) GetFeatureFlag(id string) (*feature.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureFlag", id)
	ret0, _ := ret[0].(*feature.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureFlag indicates an expected call of GetFeatureFlag.
func (mr *MockFeaturesCacheMockRecorder) GetFeatureFlag(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureFlag", reflect.TypeOf((*MockFeaturesCache)(nil).GetFeatureFlag), id)
}

// GetFeatureFlagsID mocks base method.
func (m *MockFeaturesCache) GetFeatureFlagsID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureFlagsID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureFlagsID indicates an expected call of GetFeatureFlagsID.
func (mr *MockFeaturesCacheMockRecorder) GetFeatureFlagsID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureFlagsID", reflect.TypeOf((*MockFeaturesCache)(nil).GetFeatureFlagsID))
}

// GetRequestedAt mocks base method.
func (m *MockFeaturesCache) GetRequestedAt() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestedAt")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestedAt indicates an expected call of GetRequestedAt.
func (mr *MockFeaturesCacheMockRecorder) GetRequestedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestedAt", reflect.TypeOf((*MockFeaturesCache)(nil).GetRequestedAt))
}

// PutFeatureFlag mocks base method.
func (m *MockFeaturesCache) PutFeatureFlag(feature *feature.Feature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFeatureFlag", feature)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutFeatureFlag indicates an expected call of PutFeatureFlag.
func (mr *MockFeaturesCacheMockRecorder) PutFeatureFlag(feature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFeatureFlag", reflect.TypeOf((*MockFeaturesCache)(nil).PutFeatureFlag), feature)
}

// PutFeatureFlagsID mocks base method.
func (m *MockFeaturesCache) PutFeatureFlagsID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFeatureFlagsID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutFeatureFlagsID indicates an expected call of PutFeatureFlagsID.
func (mr *MockFeaturesCacheMockRecorder) PutFeatureFlagsID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFeatureFlagsID", reflect.TypeOf((*MockFeaturesCache)(nil).PutFeatureFlagsID), id)
}

// PutRequestedAt mocks base method.
func (m *MockFeaturesCache) PutRequestedAt(timestamp int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRequestedAt", timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutRequestedAt indicates an expected call of PutRequestedAt.
func (mr *MockFeaturesCacheMockRecorder) PutRequestedAt(timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRequestedAt", reflect.TypeOf((*MockFeaturesCache)(nil).PutRequestedAt), timestamp)
}
