// Code generated by MockGen. DO NOT EDIT.
// Source: segment_users.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	feature "github.com/bucketeer-io/bucketeer/proto/feature"
	gomock "go.uber.org/mock/gomock"
)

// MockSegmentUsersCache is a mock of SegmentUsersCache interface.
type MockSegmentUsersCache struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentUsersCacheMockRecorder
}

// MockSegmentUsersCacheMockRecorder is the mock recorder for MockSegmentUsersCache.
type MockSegmentUsersCacheMockRecorder struct {
	mock *MockSegmentUsersCache
}

// NewMockSegmentUsersCache creates a new mock instance.
func NewMockSegmentUsersCache(ctrl *gomock.Controller) *MockSegmentUsersCache {
	mock := &MockSegmentUsersCache{ctrl: ctrl}
	mock.recorder = &MockSegmentUsersCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentUsersCache) EXPECT() *MockSegmentUsersCacheMockRecorder {
	return m.recorder
}

// GetRequestedAt mocks base method.
func (m *MockSegmentUsersCache) GetRequestedAt() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestedAt")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestedAt indicates an expected call of GetRequestedAt.
func (mr *MockSegmentUsersCacheMockRecorder) GetRequestedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestedAt", reflect.TypeOf((*MockSegmentUsersCache)(nil).GetRequestedAt))
}

// GetSegmentIDs mocks base method.
func (m *MockSegmentUsersCache) GetSegmentIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentIDs indicates an expected call of GetSegmentIDs.
func (mr *MockSegmentUsersCacheMockRecorder) GetSegmentIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentIDs", reflect.TypeOf((*MockSegmentUsersCache)(nil).GetSegmentIDs))
}

// GetSegmentUsers mocks base method.
func (m *MockSegmentUsersCache) GetSegmentUsers(segmentID string) (*feature.SegmentUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentUsers", segmentID)
	ret0, _ := ret[0].(*feature.SegmentUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentUsers indicates an expected call of GetSegmentUsers.
func (mr *MockSegmentUsersCacheMockRecorder) GetSegmentUsers(segmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentUsers", reflect.TypeOf((*MockSegmentUsersCache)(nil).GetSegmentUsers), segmentID)
}

// PutRequestedAt mocks base method.
func (m *MockSegmentUsersCache) PutRequestedAt(timestamp int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRequestedAt", timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutRequestedAt indicates an expected call of PutRequestedAt.
func (mr *MockSegmentUsersCacheMockRecorder) PutRequestedAt(timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRequestedAt", reflect.TypeOf((*MockSegmentUsersCache)(nil).PutRequestedAt), timestamp)
}

// PutSegmentUsers mocks base method.
func (m *MockSegmentUsersCache) PutSegmentUsers(segmentUsers *feature.SegmentUsers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSegmentUsers", segmentUsers)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSegmentUsers indicates an expected call of PutSegmentUsers.
func (mr *MockSegmentUsersCacheMockRecorder) PutSegmentUsers(segmentUsers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSegmentUsers", reflect.TypeOf((*MockSegmentUsersCache)(nil).PutSegmentUsers), segmentUsers)
}
