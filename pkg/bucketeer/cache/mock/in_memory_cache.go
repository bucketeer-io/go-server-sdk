// Code generated by MockGen. DO NOT EDIT.
// Source: in_memory_cache.go
//
// Generated by this command:
//
//	mockgen -source=in_memory_cache.go -package=mock -destination=./mock/in_memory_cache.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockInMemoryCache is a mock of InMemoryCache interface.
type MockInMemoryCache struct {
	ctrl     *gomock.Controller
	recorder *MockInMemoryCacheMockRecorder
}

// MockInMemoryCacheMockRecorder is the mock recorder for MockInMemoryCache.
type MockInMemoryCacheMockRecorder struct {
	mock *MockInMemoryCache
}

// NewMockInMemoryCache creates a new mock instance.
func NewMockInMemoryCache(ctrl *gomock.Controller) *MockInMemoryCache {
	mock := &MockInMemoryCache{ctrl: ctrl}
	mock.recorder = &MockInMemoryCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInMemoryCache) EXPECT() *MockInMemoryCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockInMemoryCache) Delete(key any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockInMemoryCacheMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInMemoryCache)(nil).Delete), key)
}

// Destroy mocks base method.
func (m *MockInMemoryCache) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockInMemoryCacheMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockInMemoryCache)(nil).Destroy))
}

// Get mocks base method.
func (m *MockInMemoryCache) Get(key any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInMemoryCacheMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInMemoryCache)(nil).Get), key)
}

// Put mocks base method.
func (m *MockInMemoryCache) Put(key, value any, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockInMemoryCacheMockRecorder) Put(key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockInMemoryCache)(nil).Put), key, value, expiration)
}

// Scan mocks base method.
func (m *MockInMemoryCache) Scan(keyPrefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", keyPrefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockInMemoryCacheMockRecorder) Scan(keyPrefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockInMemoryCache)(nil).Scan), keyPrefix)
}
