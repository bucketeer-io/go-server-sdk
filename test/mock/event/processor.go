// Code generated by MockGen. DO NOT EDIT.
// Source: processor.go
//
// Generated by this command:
//
//	mockgen -source=processor.go -package=event -destination=../../../test/mock/event/processor.go
//

// Package event is a generated GoMock package.
package event

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"

	model "github.com/bucketeer-io/go-server-sdk/pkg/bucketeer/model"
	user "github.com/bucketeer-io/go-server-sdk/pkg/bucketeer/user"
)

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProcessor) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProcessorMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProcessor)(nil).Close), ctx)
}

// PushDefaultEvaluationEvent mocks base method.
func (m *MockProcessor) PushDefaultEvaluationEvent(user *user.User, featureID string, reason model.ReasonType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushDefaultEvaluationEvent", user, featureID, reason)
}

// PushDefaultEvaluationEvent indicates an expected call of PushDefaultEvaluationEvent.
func (mr *MockProcessorMockRecorder) PushDefaultEvaluationEvent(user, featureID, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushDefaultEvaluationEvent", reflect.TypeOf((*MockProcessor)(nil).PushDefaultEvaluationEvent), user, featureID, reason)
}

// PushErrorEvent mocks base method.
func (m *MockProcessor) PushErrorEvent(err error, api model.APIID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushErrorEvent", err, api)
}

// PushErrorEvent indicates an expected call of PushErrorEvent.
func (mr *MockProcessorMockRecorder) PushErrorEvent(err, api any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushErrorEvent", reflect.TypeOf((*MockProcessor)(nil).PushErrorEvent), err, api)
}

// PushEvaluationEvent mocks base method.
func (m *MockProcessor) PushEvaluationEvent(user *user.User, evaluation *model.Evaluation) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushEvaluationEvent", user, evaluation)
}

// PushEvaluationEvent indicates an expected call of PushEvaluationEvent.
func (mr *MockProcessorMockRecorder) PushEvaluationEvent(user, evaluation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushEvaluationEvent", reflect.TypeOf((*MockProcessor)(nil).PushEvaluationEvent), user, evaluation)
}

// PushEvent mocks base method.
func (m *MockProcessor) PushEvent(encoded []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushEvent", encoded)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushEvent indicates an expected call of PushEvent.
func (mr *MockProcessorMockRecorder) PushEvent(encoded any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushEvent", reflect.TypeOf((*MockProcessor)(nil).PushEvent), encoded)
}

// PushGoalEvent mocks base method.
func (m *MockProcessor) PushGoalEvent(user *user.User, GoalID string, value float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushGoalEvent", user, GoalID, value)
}

// PushGoalEvent indicates an expected call of PushGoalEvent.
func (mr *MockProcessorMockRecorder) PushGoalEvent(user, GoalID, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushGoalEvent", reflect.TypeOf((*MockProcessor)(nil).PushGoalEvent), user, GoalID, value)
}

// PushLatencyMetricsEvent mocks base method.
func (m *MockProcessor) PushLatencyMetricsEvent(duration time.Duration, api model.APIID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushLatencyMetricsEvent", duration, api)
}

// PushLatencyMetricsEvent indicates an expected call of PushLatencyMetricsEvent.
func (mr *MockProcessorMockRecorder) PushLatencyMetricsEvent(duration, api any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushLatencyMetricsEvent", reflect.TypeOf((*MockProcessor)(nil).PushLatencyMetricsEvent), duration, api)
}

// PushSizeMetricsEvent mocks base method.
func (m *MockProcessor) PushSizeMetricsEvent(sizeByte int, api model.APIID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushSizeMetricsEvent", sizeByte, api)
}

// PushSizeMetricsEvent indicates an expected call of PushSizeMetricsEvent.
func (mr *MockProcessorMockRecorder) PushSizeMetricsEvent(sizeByte, api any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushSizeMetricsEvent", reflect.TypeOf((*MockProcessor)(nil).PushSizeMetricsEvent), sizeByte, api)
}
