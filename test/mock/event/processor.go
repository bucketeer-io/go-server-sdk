// Code generated by MockGen. DO NOT EDIT.
// Source: processor.go

// Package mockevent is a generated GoMock package.
package mockevent

import (
	context "context"
	client "github.com/ca-dp/bucketeer-go-server-sdk/proto/event/client"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProcessor is a mock of Processor interface
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// PushEvaluationEvent mocks base method
func (m *MockProcessor) PushEvaluationEvent(ctx context.Context, evt client.EvaluationEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushEvaluationEvent", ctx, evt)
}

// PushEvaluationEvent indicates an expected call of PushEvaluationEvent
func (mr *MockProcessorMockRecorder) PushEvaluationEvent(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushEvaluationEvent", reflect.TypeOf((*MockProcessor)(nil).PushEvaluationEvent), ctx, evt)
}

// PushGoalEvent mocks base method
func (m *MockProcessor) PushGoalEvent(ctx context.Context, evt client.GoalEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushGoalEvent", ctx, evt)
}

// PushGoalEvent indicates an expected call of PushGoalEvent
func (mr *MockProcessorMockRecorder) PushGoalEvent(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushGoalEvent", reflect.TypeOf((*MockProcessor)(nil).PushGoalEvent), ctx, evt)
}

// PushMetricsEvent mocks base method
func (m *MockProcessor) PushMetricsEvent(ctx context.Context, evt client.MetricsEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushMetricsEvent", ctx, evt)
}

// PushMetricsEvent indicates an expected call of PushMetricsEvent
func (mr *MockProcessorMockRecorder) PushMetricsEvent(ctx, evt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMetricsEvent", reflect.TypeOf((*MockProcessor)(nil).PushMetricsEvent), ctx, evt)
}

// Close mocks base method
func (m *MockProcessor) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockProcessorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProcessor)(nil).Close))
}
